class
X2GoDOMController
{constructor()
{this.__sepWnd=0;this.__x2goclient=0;this.__clipElement=0;this.__clipElementText=0;this.__clipElementCloseImg=0;this.__clipFocused=false;this.__clipOpened=false;this.__clipBlobUrl=0;this.__clipBlobUrlOutput=0;this.__clipBlobOutput=0;this.__inputClip=false;this.__clipMime=0;this.__clipBuffer=0;this.__fpsdisplay=0;let app=this;window.addEventListener("unload",function(e)
{if(app.__sepWnd)
{app.__sepWnd.close();}});document.getElementById("detach").addEventListener("click",function()
{app.detachSession(app);});this.__clipElement=document.getElementById("x2goclip");this.__clipElementText=document.getElementById("x2goclip_text");this.__clipElementCloseImg=document.getElementById("x2goclip_close_img");let clb=document.getElementById("close_clip");this.initClipElement(this.__clipElementText,clb);window.addEventListener("click",function(e){if(app.__clipOpened)
{let widg=e.target;while(widg)
{if(widg==app.__clipElement)
{return;}
widg=widg.parentNode;}
app.closeClipElement();}});}
attachSession(app)
{if(!app.__sepWnd)
{return;}
console.log("back to main Window");app.__sepWnd.close();app.__sepWnd=0;let cl=app.__x2goclient;let c=cl.__kdriveClient;document.getElementById("copy_from").style.display="inline-block";document.getElementById("copy_to").style.display="inline-block";app.updateStatus("<b>"+cl.__sessionID+"</b>");app.getCanvas().style.display="block";c.initCanvas(app.getCanvas());c.sendGeometryEvent();c.__cursor=document.getElementById("x2go_cursor");document.getElementById("detach_img").src=asset_path+"detach.png";document.getElementById("detach_span").innerText="New window";this.__clipElement=document.getElementById("x2goclip");this.__clipElementText=document.getElementById("x2goclip_text");this.__clipElementCloseImg=document.getElementById("x2goclip_close_img");}
initWindow(app,wnd)
{if(wnd.document.readyState!="complete")
{setTimeout(function()
{app.initWindow(app,wnd);},100);return;}
let cl=app.__x2goclient;let c=cl.__kdriveClient;console.log("Window is loaded");wnd.document.getElementById("status_cap").innerHTML="<b>"+cl.__sessionID+"</b>";wnd.document.getElementById("suspend").addEventListener("click",function()
{cl.suspendSession(cl)});wnd.document.getElementById("terminate").addEventListener("click",function()
{if(wnd.confirm("Are you sure you want to terminate this session?\nUnsaved documents will be lost."))
{cl.terminateSession(cl)}});wnd.document.getElementById("attach").addEventListener("click",function()
{app.attachSession(app,wnd)});document.getElementById("copy_from").style.display="none";document.getElementById("copy_to").style.display="none";wnd.document.getElementById("copy_from").addEventListener("click",function()
{c.copyFromServerToSystem();});wnd.document.getElementById("copy_to").addEventListener("click",function()
{c.copyFromSystemToServer(true);});this.__clipElement=wnd.document.getElementById("x2goclip");this.__clipElementText=wnd.document.getElementById("x2goclip_text");this.__clipElementCloseImg=wnd.document.getElementById("x2goclip_close_img");let clb=wnd.document.getElementById("close_clip");this.initClipElement(this.__clipElementText,clb);wnd.addEventListener("click",function(e){if(app.__clipOpened)
{let widg=e.target;while(widg)
{if(widg==app.__clipElement)
{return;}
widg=widg.parentNode;}
app.closeClipElement();}});app.getCanvas().style.display="none";wnd.document.title="X2Go Client - "+app.getName();wnd.addEventListener("unload",function(e)
{app.attachSession(app,wnd);});let cv=wnd.document.getElementById("canvas");console.log("new canvas:",cv);c.initCanvas(cv);c.createCursor(wnd.document,wnd);cl.resizeExtCanvas(c,cv,wnd);document.getElementById("detach_img").src=asset_path+"attach.png";document.getElementById("detach_span").innerText="This window";wnd.addEventListener("resize",function()
{cl.resizeExtCanvas(c,cv,wnd);})}
detachSession(app)
{if(app.__sepWnd)
{app.attachSession(app,app.__sepWnd);return;}
let cl=app.__x2goclient;app.updateStatus("X2Go session with ID <b>"+cl.__sessionID+"</b> displayed in other window");let wnd=window.open("/x2go/x2gokdriveclient.html","X2Go Client","toolbar=no,resizable=yes,location=no,menubar=no,status=no,titlebar=no");app.__sepWnd=wnd;console.log("deatch session to",wnd);setTimeout(function()
{app.initWindow(app,wnd);},500);}
setStartCallback(obj,start,suspend,terminate)
{this.__x2goclient=obj;let app=this;document.getElementById("con-btn").addEventListener("click",function()
{if(!validateForm())
{return;}
document.getElementById("controls").style.display="none";document.getElementById("canvas").style.display="block";start(obj);});document.getElementById("suspend").addEventListener("click",function()
{suspend(obj);});document.getElementById("terminate").addEventListener("click",function()
{if(confirm("Are you sure you want to terminate this session?\nUnsaved documents will be lost."))
terminate(obj);});document.getElementById("copy_from").addEventListener("click",function()
{obj.__kdriveClient.copyFromServerToSystem();});document.getElementById("copy_to").addEventListener("click",function()
{obj.__kdriveClient.copyFromSystemToServer(true);});}
initClipElement(elem,closeBut)
{let app=this;elem.addEventListener("paste",function(e)
{for(let i=0;i<e.clipboardData.items.length;++i)
{if(e.clipboardData.items[i].type=="image/png")
{console.log("Inserting image");app.__clipElementText.innerText="";if(app.__clipBlobUrlOutput==0)
{window.URL.revokeObjectURL(app.__clipBlobUrlOutput);}
app.__clipBlobOutput=e.clipboardData.items[i].getAsFile();app.__clipBlobUrlOutput=window.URL.createObjectURL(app.__clipBlobOutput);app.__clipElementText.innerHTML="<img src='"+app.__clipBlobUrlOutput+"'/>";e.stopPropagation();return;}}});elem.addEventListener("focus",function(){if(!app.__clipFocused)
{app.__clipFocused=true;app.__clipElementText.style.color="black";app.__clipElementText.innerText="";}});elem.addEventListener("keyup",function(e){if(e.key==="Escape"){app.closeClipElement();}});closeBut.addEventListener("click",function(){app.closeClipElement();if(!app.__inputClip||!app.__clipFocused)
{return;}
if(app.__clipBlobUrlOutput&&(app.__clipElementText.innerHTML.indexOf(app.__clipBlobUrlOutput)!=-1))
{app.getBufferFromOutputImage();}
else
{if(app.__clipElementText.innerText.length)
{app.__clipMime=UTF_STRING;let encoder=new TextEncoder();app.__clipBuffer=encoder.encode(app.__clipElementText.innerText).buffer;app.__x2goclient.__kdriveClient.sendSelNotify(app.__clipMime);}}});}
async getBufferFromOutputImage()
{let app=this;app.__clipMime=PIXMAP;app.__clipBuffer=await app.__clipBlobOutput.arrayBuffer();app.__x2goclient.__kdriveClient.sendSelNotify(app.__clipMime);}
closeClipElement()
{let app=this;app.__clipElement.style.opacity="0";app.__clipOpened=false;setTimeout(function()
{app.__clipElement.style.visibility="hidden";},300);}
openClipElement(data)
{let app=this;this.__clipElement.style.visibility="visible";this.__clipElement.style.opacity="1";if(!data)
{this.__inputClip=true;this.__clipFocused=false;this.__clipElementCloseImg.src=asset_path+"clip_copy_close.png"
this.__clipElementText.style.color="grey";this.__clipElementText.innerText="Paste text or image here";this.__clipElementText.contentEditable=true;}
else
{this.__inputClip=false;this.__clipElementCloseImg.src=asset_path+"clip_close.png"
this.__clipFocused=true;this.__clipElementText.style.color="black";if(data.type&&data.type=="image/png")
{if(app.__clipBlobUrl)
{window.URL.revokeObjectURL(app.__clipBlobUrl);app.__clipBlobUrl=0;}
app.__clipBlobUrl=window.URL.createObjectURL(data);this.__clipElementText.innerHTML="<img src='"+app.__clipBlobUrl+"'/>";}
else
{this.__clipElementText.innerText=data;}
this.__clipElementText.contentEditable=false;}
app.__clipOpened=true;}
showSessionControls(val)
{let disp="inline";if(!val)
{disp="none";}
document.getElementById("session_control").style.display=disp;}
serverClipNotify(id,text)
{let elem;if(this.__sepWnd)
{elem=this.__sepWnd.document.getElementById(id);}
else
{elem=document.getElementById(id);}
elem.innerText=text;elem.style.visibility="visible";elem.style.opacity="1";setTimeout(function()
{elem.style.opacity="0";},1000);setTimeout(function()
{elem.style.visibility="hidden";},1300);}
updateStatus(text)
{{document.getElementById("status").style.display="inline";document.getElementById("status_cap").innerHTML=text;}}
reloadForm()
{document.getElementById("controls").style.display="block";document.getElementById("canvas").style.display="none";document.getElementById("status").style.display="none";document.getElementById("pass").focus();this.showSessionControls(false);}
getCanvas()
{return document.getElementById("canvas");}
getBackground()
{return asset_path+"x2gobg.svg";}
getProxy()
{return getProxy();}
getProxyUser()
{return getProxyUser();}
getProxyPass()
{return getProxyPass();}
getServer()
{let srv=getServer();if(srv=="__externalIp__")
{console.log("Running in dev mode on localhost");return "localhost";}
return srv;}
getUname()
{return getUname();}
getPass()
{return getPass();}
getCommand()
{return getCommand();}
getCompression()
{return getCompression();}
getName()
{return getName();}}
var FEATURE_VERSION=4;var OS_VERSION=3;const KEYPRESS=2;const KEYRELEASE=3;const MOUSEPRESS=4;const MOUSERELEASE=5;const MOUSEMOTION=6;const GEOMETRY=7;const UPDATE=8;const SELECTIONEVENT=9;const CLIENTVERSION=10;const DEMANDSELECTION=11;const KEEPALIVE=12;const EVENT_LENGTH=41;const Button1Mask=(1<<8);const Button2Mask=(1<<9);const Button3Mask=(1<<10);const Button4Mask=(1<<11);const Button5Mask=(1<<12);const Button1=1;const Button2=2;const Button3=3;const Button4=4;const Button5=5;const ShiftMask=(1<<0);const LockMask=(1<<1);const ControlMask=(1<<2);const Mod1Mask=(1<<3);const Mod2Mask=(1<<4);const Mod3Mask=(1<<5);const Mod4Mask=(1<<6);const Mod5Mask=(1<<7);const HEADER_SIZE=56;const REGION_SIZE=64;const HEADER=0;const FRAMEREGION=1;const REGIONDATA=2;const CURSORDATA=3;const CURSORLIST=4;const FRAMELIST=5;const SELECTIONBUFFER=6;const H264STREAM=15;const FRAME=0;const DELETEDFRAMES=1;const CURSOR=2;const DELETEDCURSORS=3;const SELECTION=4;const SERVER_VERSION=5;const DEMANDCLIENTSELECTION=6;const H264HEADER=14;const STRING=0;const UTF_STRING=1;const PIXMAP=2;const PRIMARY=0;const CLIPBOARD=1;class
X2GoKDriveHTMLClient
{constructor(canvas,background,x2goclient)
{this.__background=background;this.__websocket=null;this.__currentDataType=0;this.__bytesLeftToRead=0;this.__bytesReady=0;this.__messageBuffer=0;this.__currentFrame=0;this.__currentCursor=0;this.__frameCash=new Map();this.__cursorCash=new Map();this.__drawQueue=[];this.__deletedFramesSize=0;this.__deletedCursorSize=0;this.__cookie=0;this.__connected=false;this.__x2goclient=x2goclient;this.__serverVersion=0;this.__sendAlive=0;this.__cursor=0;this.__serverExtSelection=false;this.__selectionSize;this.__selectionTotalSize;this.__selectionFormat;this.__selectionClipboard;this.__firstChunk;this.__lastChunk;this.__compressedSize;this.__selData=0;this.__totalCompressed=0;let app=this;this.__display;this.__decoder;this.initCanvasAndDecoder(canvas);this.createCursor(document,window);}
initDecoder(){this.__decoder=new Worker('./dist/h264_worker.js');console.log("Created decoder");this.__decoder.addEventListener('message',function(e){var message=e.data;if(!message.hasOwnProperty('type'))return;switch(message.type){case 'pictureReady':console.log("message: width:%d, height:%d, croppingParams:%s, data:%s",message.width,message.height,message.croppingParams,message.data);this.__display.drawNextOutputPicture(message.width,message.height,message.croppingParams,new Uint8Array(message.data));break;case 'decoderReady':console.log('Decoder ready');break;}});}
initCanvasAndDecoder(canvas)
{let app=this;this.__canvas=canvas;this.__canvas.oncontextmenu=function(e)
{e.preventDefault();};console.log("install resize listener");this.__canvas.onresize=function(e)
{console.log("canvas resized");app.sendGeometryEvent();};this.__decoder=new Worker('./dist/h264_worker.js');this.__decoder.addEventListener('message',function(e){var message=e.data;if(!message.hasOwnProperty('type'))return;switch(message.type){case 'pictureReady':app.drawCanvasImg(message.width,message.height,new Uint8Array(message.data));break;case 'decoderReady':console.log('Decoder ready');break;}});app.__canvas.addEventListener("mousedown",function(e)
{app.sendMouseEvent(e);});app.__canvas.addEventListener("mouseup",function(e)
{app.sendMouseEvent(e);});app.__canvas.addEventListener("pointermove",function(e)
{if(app.__cursor.src)
{app.__cursor.style.visibility='visible';}
app.sendMouseEvent(e);});app.__canvas.addEventListener("wheel",function(e)
{app.sendMouseEvent(e);});app.__canvas.addEventListener("keydown",function(e)
{app.sendKeyEvent(e);});app.__canvas.addEventListener("keyup",function(e)
{app.sendKeyEvent(e);});}
drawCanvasImg(width,height,data){let ctx=this.__canvas.getContext("2d");let imageData=ctx.getImageData(0,0,width,height);imageData.data.set(data);ctx.putImageData(imageData,0,0);++pictureCount;}
createCursor(doc,wnd)
{this.__cursor=doc.createElement("IMG");this.__cursor.id="x2go_cursor";this.__cursor.style.position='absolute';this.__cursor.style.width='20';this.__cursor.style.height='20';this.__cursor.style.left='200';this.__cursor.style.top='200';this.__cursor.style.cursor='none';this.__cursor.style.userSelect='none';this.__cursor.style.pointerEvents='none';this.__cursor.style.visibility='hidden';this.__cursor.dataset.hotX=0;this.__cursor.dataset.hotY=0;doc.body.appendChild(this.__cursor);let app=this;app.__canvas.addEventListener("mouseout",function(e)
{app.__cursor.style.visibility='hidden';});wnd.addEventListener("pointermove",function(e)
{app.__cursor.style.left=e.pageX-app.__cursor.dataset.hotX+'px';app.__cursor.style.top=e.pageY-app.__cursor.dataset.hotY+'px';});this.__cursor.onload=function()
{app.__cursor.style.visibility='visible';app.__cursor.style.display='initial';}
app.__cursor.onerror=function(evt)
{console.log("CURSOR LOAD ERRR",evt,app.__cursor);app.__cursor.style.visibility='hidden';app.__cursor.style.display='none';app.__canvas.style.cursor="auto";}}
renderBackground()
{if(!this.__background)
{return;}
let canv=this.__canvas;let ctx=canv.getContext("2d");let img=new Image();img.onload=function()
{ctx.drawImage(img,0,0,canv.clientWidth,canv.clientHeight);}
img.src=this.__background;}
restoreResizeCursor(e)
{let app=this;let body=app.__canvas.parentElement;if(app.__bodyOnBorder)
{app.__bodyOnBorder=false;body.style.cursor=app.__bodySavedCursor;app.__bodySavedCursor='';e.preventDefault();e.stopPropagation();}
if(app.__bodyResizing)
{app.__bodyResizing=false;}}
processResize(e)
{let app=this;let body=app.__canvas.parentElement;if(e.type=="mousedown")
{if((e.button!=0)||(e.buttons!=1))
{app.restoreResizeCursor(e);return;}
if(app.__bodyOnBorder)
{app.__bodyResizing=true;}}
if(e.type=="mouseup")
{app.restoreResizeCursor(e);}
if(e.type=="pointermove")
{if(app.__bodyResizing)
{let width;let height;if(e.target==body)
{width=e.offsetX-app.__canvas.offsetLeft;height=e.offsetY-app.__canvas.offsetTop;}
else if(e.target==app.__canvas)
{width=e.offsetX;height=e.offsetY;}
else
{return;}
if(body.style.cursor=="e-resize")
{app.__canvas.width=width+"px";}
if(body.style.cursor=="s-resize")
{app.__canvas.height=height+"px";}
if(body.style.cursor=="nw-resize")
{app.__canvas.style.width=width+"px";app.__canvas.style.height=height+"px";}
app.__canvas.width=width;app.__canvas.height=height;app.sendGeometryEvent();return;}
if(e.target==app.__canvas)
{let corner=false;let right=false;let bottom=false;let cursor;if((e.offsetX>=app.__canvas.clientWidth-2))
{right=true;}
if((e.offsetY>=app.__canvas.clientHeight-2))
{bottom=true;}
if(right&&bottom)
{corner=true;}
if(right)
{cursor="e-resize";}
if(bottom)
{cursor="s-resize";}
if(corner)
{cursor="nw-resize";}
if(right||bottom||corner)
{if(!app.__bodyOnBorder)
{app.__bodySavedCursor=body.style.cursor;app.__bodyOnBorder=true;}
body.style.cursor=cursor;e.preventDefault();e.stopPropagation();}
else
{app.restoreResizeCursor(e);}}
else
{app.restoreResizeCursor(e);}}}
getGeometry()
{return this.__canvas.clientWidth+"x"+this.__canvas.clientHeight;}
startCommunication()
{let app=this;initsocket();}
sendClientVersion()
{let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,5);let v16=new Uint16Array(buffer,0,5);v32[0]=CLIENTVERSION;v16[2]=FEATURE_VERSION;v16[3]=OS_VERSION;console.log("Sending client Version and OS:",buffer,v32,v16);this.__websocket.send(buffer);}
sendKeepAlive()
{let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,5);v32[0]=KEEPALIVE;console.log("keep alive event");this.__websocket.send(buffer);}
sendGeometryEvent()
{let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,5);let v16=new Uint16Array(buffer,0,5);v32[0]=GEOMETRY;v16[2]=this.__canvas.clientWidth;v16[3]=this.__canvas.clientHeight;console.log("Sending geometry event:",buffer,v32,v16);if(this.__websocket.readyState==WebSocket.OPEN)
{this.__websocket.send(buffer);}}
sendCookie()
{let encoder=new TextEncoder();this.__websocket.send(encoder.encode(this.__cookie).buffer);}
web2pc105(nativeCode)
{switch(nativeCode)
{case 192:return 49;case 49:return 10;case 50:return 11;case 51:return 12;case 52:return 13;case 53:return 14;case 54:return 15;case 55:return 16;case 56:return 17;case 57:return 18;case 48:return 19;case 189:return 20;case 187:return 21;case 8:return 22;case 9:return 23;case 81:return 24;case 87:return 25;case 69:return 26;case 82:return 27;case 84:return 28;case 89:return 29;case 85:return 30;case 73:return 31;case 79:return 32;case 80:return 33;case 219:return 34;case 221:return 35;case 13:return 36;case 20:return 66;case 65:return 38;case 83:return 39;case 68:return 40;case 70:return 41;case 71:return 42;case 72:return 43;case 74:return 44;case 75:return 45;case 76:return 46;case 186:return 47;case 222:return 48;case 220:return 51;case 16:return 50;case 220:return 94;case 90:return 52;case 88:return 53;case 67:return 54;case 86:return 55;case 66:return 56;case 78:return 57;case 77:return 58;case 188:return 59;case 190:return 60;case 191:return 61;case 16:return 62;case 17:return 37;case 91:return 133;case 18:return 64;case 32:return 65;case 225:return 108;case 92:return 134;case 93:return 135;case 17:return 105;case 27:return 9;case 112:return 67;case 113:return 68;case 114:return 69;case 115:return 70;case 116:return 71;case 117:return 72;case 118:return 73;case 119:return 74;case 120:return 75;case 121:return 76;case 122:return 95;case 123:return 96;case 44:return 107;case 145:return 78;case 19:return 127;case 45:return 118;case 36:return 110;case 33:return 112;case 46:return 119;case 35:return 115;case 34:return 117;case 38:return 111;case 37:return 113;case 40:return 116;case 39:return 114;case 144:return 77;case 111:return 106;case 106:return 63;case 109:return 82;case 36:return 79;case 38:return 80;case 33:return 81;case 107:return 86;case 37:return 83;case 12:return 84;case 39:return 85;case 35:return 87;case 40:return 88;case 34:return 89;case 13:return 104;case 45:return 90;case 46:return 91;case 96:return 90;case 97:return 87;case 98:return 88;case 99:return 89;case 100:return 83;case 101:return 84;case 102:return 85;case 103:return 79;case 104:return 80;case 105:return 81;case 108:return 91;}
return nativeCode;}
sendMouseEvent(e)
{if(!this.__connected)
{return;}
let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,3);if(e.type=="pointermove")
{v32[0]=MOUSEMOTION;v32[1]=e.offsetX;v32[2]=e.offsetY;}
else
{v32[1]=0;if(e.type=="wheel")
{e.preventDefault();e.stopPropagation();v32[2]=Button5;if(e.deltaY<0)
{v32[2]=Button4;}
v32[0]=MOUSEPRESS;this.__websocket.send(buffer);v32[0]=MOUSERELEASE;this.__websocket.send(buffer);return;}
if(e.type=="mousedown")
{v32[0]=MOUSEPRESS;}
if(e.type=="mouseup")
{v32[0]=MOUSERELEASE;}
if(e.button==0)
{v32[2]=Button1;}
if(e.button==2)
{v32[2]=Button3;}
if(e.button==1)
{v32[2]=Button2;}}
this.__websocket.send(buffer);}
sendKeyEvent(e)
{if(!this.__connected)
{return;}
let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,3);if(e.type=="keyup")
{v32[0]=KEYRELEASE;}
else if(e.type=="keydown")
{v32[0]=KEYPRESS;}
else
{console.log("Unsupported keyboard event: ",e.type);return;}
v32[1]=0;if(e.shiftKey)
{v32[1]|=ShiftMask;}
if(e.altKey)
{v32[1]|=Mod1Mask;}
if(e.ctrlKey)
{v32[1]|=ControlMask;}
if(e.metaKey)
{v32[1]|=Mod4Mask;}
v32[2]=this.web2pc105(e.keyCode);e.preventDefault();e.stopPropagation();this.__websocket.send(buffer);}
onOpen(evt)
{console.log("WS Open",evt);this.sendCookie();this.__connected=true;this.sendGeometryEvent();this.__x2goclient.wsopen();this.sendClientVersion();let app=this;setInterval(updateFpsCount,1000);setInterval(updateBandwidth,1000);if(!this.__sendAlive)
{this.__sendAlive=setInterval(function()
{let serverVersion=parseInt(app.__serverVersion);if(serverVersion<2)
{return;}
if(serverVersion<3)
{app.sendClientVersion();}
else
{app.sendKeepAlive();}},60000);}}
onClose(evt)
{console.log("WS Close",evt);if(this.__sendAlive)
{clearInterval(this.__sendAlive);this.__sendAlive=0;}
this.__connected=false;this.__x2goclient.wsclose();let app=this;}
onError(evt)
{if(this.__sendAlive)
{clearInterval(this.__sendAlive);this.__sendAlive=0;}
console.log("ws error",evt);this.__x2goclient.wserr();}
handleH264Data(data){this.__decoder.postMessage({'type':'input','data':data,});}
onNalMessage(evt)
{dataReceived+=parseInt(evt.data.byteLength/1024);this.handleH264Data(evt.data);}
onMessage(evt)
{let offset=0;let available=evt.data.byteLength;dataReceived+=parseInt(available/1024);while(available)
{if(!this.__bytesLeftToRead)
{this.__bytesLeftToRead=HEADER_SIZE;this.__bytesReady=0;this.__currentDataType=HEADER;}
if(!this.__messageBuffer)
{this.__messageBuffer=new ArrayBuffer(this.__bytesLeftToRead);}
let copyBytes=this.__bytesLeftToRead;if(copyBytes>available)
{copyBytes=available;}
let srcArray=new Uint8Array(this.__messageBuffer,this.__bytesReady,copyBytes);let dstArray=new Uint8Array(evt.data,offset,copyBytes);srcArray.set(dstArray);this.__bytesLeftToRead-=copyBytes;this.__bytesReady+=copyBytes;available-=copyBytes;offset+=copyBytes;if(!this.__bytesLeftToRead)
{switch(this.__currentDataType)
{case HEADER:{this.readDataHeader();break;}
case H264STREAM:{this.handleH264Data();break;}
case FRAMEREGION:{this.getFrameRegion();break;}
case REGIONDATA:{this.getRegionImage();break;}
case FRAMELIST:{this.getDeletedFramesList();break;}
case CURSORLIST:{this.getDeletedCursorsList();break;}
case CURSORDATA:{this.getCursorImage();break;}
case SELECTIONBUFFER:{this.getSelectionBuffer();break;}
default:{console.log("Not supported function!!!!");}}}}}
getRegionImage()
{let blob=new Blob([this.__messageBuffer],{type:'image/jpeg'});this.__currentFrame["regions"][this.__currentFrame["regions"].length-1]["url"]=window.URL.createObjectURL(blob);if(this.__currentFrame["regions"].length==this.__currentFrame["numOfRegions"])
{this.renderFrame();}
else
{this.__bytesReady=0;this.__bytesLeftToRead=REGION_SIZE;this.__currentDataType=FRAMEREGION;}}
appendFrame(frame)
{this.__frameCash.set(frame["crc"],frame);}
processDrawQueue()
{let ctx=this.__canvas.getContext("2d");while(this.__drawQueue.length)
{let el=this.__drawQueue[0];if(el["image"])
{if(!el["image"].complete)
{return;}
ctx.drawImage(el["image"],el["source_x"]+el["x"],el["source_y"]+el["y"]);URL.revokeObjectURL(el["image"].currentSrc);el["image"]=0;}
else
{let src=el["source_frame"];ctx.putImageData(src["imgData"],el["x"]-el["source_x"],el["y"]-el["source_y"],el["source_x"],el["source_y"],el["width"],el["height"]);++pictureCount;}
if(el["frame"])
{let frame=el["frame"];frame["imgData"]=ctx.getImageData(frame["x"],frame["y"],frame["width"],frame["height"]);}
this.__drawQueue.shift();}}
renderFrame()
{let fr=this.__currentFrame;if(!fr["crc"])
{fr["x"]=fr["y"]=0;}
else
{}
let processedregions=0;let app=this;if(!fr["numOfRegions"])
{let actFr=this.__frameCash.get(fr["crc"]);if(actFr)
{let obj={};obj["noreg"]=true;obj["source_x"]=obj["source_y"]=0;obj["source_frame"]=actFr;obj["x"]=fr["x"];obj["y"]=fr["y"];obj["width"]=fr["width"];obj["height"]=fr["height"];app.__drawQueue.push(obj);app.processDrawQueue();}}
for(let i=0;i<fr["numOfRegions"];i++)
{let reg=fr["regions"][i];let obj={};obj["source_x"]=obj["source_y"]=0;obj["x"]=fr["x"]+reg["x"];obj["y"]=fr["y"]+reg["y"];obj["width"]=reg["width"];obj["height"]=reg["height"];if(!reg["source_crc"])
{let img=new Image();obj["image"]=img;img.onload=function()
{app.processDrawQueue();}
img.onerror=function(evt)
{console.log("LOAD ERRR",evt,img,reg);app.__websocket.close();return;}
img.src=reg["url"];}
else
{let src=this.__frameCash.get(reg["source_crc"]);if(!src)
{console.log("Error!!!, frame not found ",reg["source_crc"]);}
else
{obj["source_x"]=reg["source_x"];obj["source_y"]=reg["source_y"];obj["source_frame"]=src;}}
if(i==fr["numOfRegions"]-1&&fr["crc"])
{obj["frame"]={};Object.assign(obj["frame"],fr);this.appendFrame(obj["frame"]);}
app.__drawQueue.push(obj);app.processDrawQueue();}}
getH264Data()
{let msgArr=new Uint32Array(this.__messageBuffer,0,3);serverTime=msgArr[2];this.__currentDataType=H264STREAM;this.__bytesLeftToRead=msgArr[1];this.__messageBuffer=0;this.__bytesReady=0;console.log("server time : %d, data length : %d",serverTime,msgArr[1]);}
readDataHeader()
{let msgArr=new Uint32Array(this.__messageBuffer,0,1);switch(msgArr[0])
{case H264HEADER:this.getH264Data();break;case FRAME:{this.getImageFrame();break;}
case CURSOR:{this.getCursor();break;}
case DELETEDFRAMES:{this.getDeletedFrames();break;}
case DELETEDCURSORS:{this.getDeletedCursors();break;}
case SELECTION:{this.getSelection();break;}
case SERVER_VERSION:{this.getServerVersion();break;}
case DEMANDCLIENTSELECTION:{console.log("Server demands selection");this.copyFromSystemToServer();break;}
default:{console.log("ERROR!!!!! Unsupported header");this.__websocket.close();}}
this.__messageBuffer=0;}
getDeletedCursorsList()
{let msgArr=new Uint32Array(this.__messageBuffer,0,this.__deletedCursorsSize);for(let i=0;i<this.__deletedCursorsSize;i++)
{let serial=msgArr[i];if(!this.__cursorCash.delete(serial))
{console.log("ERROR deleting",serial," from ",this.__cursorCash);}}
this.__messageBuffer=0;}
getDeletedCursors()
{this.__bytesReady=0;this.__currentDataType=CURSORLIST;let msgArr=new Uint32Array(this.__messageBuffer,0,2);this.__deletedCursorsSize=msgArr[1];this.__bytesLeftToRead=msgArr[1]*4;this.__messageBuffer=0;}
getDeletedFramesList()
{let msgArr=new Uint32Array(this.__messageBuffer,0,this.__deletedFramesSize);for(let i=0;i<this.__deletedFramesSize;i++)
{let crc=msgArr[i];if(!this.__frameCash.delete(crc))
{console.log("ERROR deleting",crc," from ",this.__frameCash);}}
this.__messageBuffer=0;}
getDeletedFrames()
{this.__bytesReady=0;this.__currentDataType=FRAMELIST;let msgArr=new Uint32Array(this.__messageBuffer,0,2);this.__deletedFramesSize=msgArr[1];this.__bytesLeftToRead=msgArr[1]*4;this.__messageBuffer=0;}
getServerVersion()
{let msgArr=new Uint16Array(this.__messageBuffer,0,4);this.__serverVersion=msgArr[2];console.log("Server version: ",this.__serverVersion);if(parseInt(this.__serverVersion)<3)
{console.log("Warning!!!! The server is using obsolete version of X2GoKdrive, some features (like mouse cursors) won't work. Please update your X2Go Server");}
if(this.__serverVersion>1)
{this.__serverExtSelection=true;}}
copyFromServerToSystem()
{if(this.__serverExtSelection)
{if(this.__serverVersion>=4)
{this.requestServerSelection();}
else
{this.pasteDataToClipboard();}}
else
{console.log("server version is too old, disable copying clipboard");}}
async copyFromSystemToServer(notify)
{let app=this;if(this.__serverExtSelection)
{let nav=navigator;if(this.__x2goclient.__domController.__sepWnd)
{nav=this.__x2goclient.__domController.__sepWnd.navigator;}
if(typeof ClipboardItem!=="undefined")
{try
{const clipboardItems=await nav.clipboard.read();for(const clipboardItem of clipboardItems)
{for(const type of clipboardItem.types)
{console.log(type);let mime;if(type=="text/plain")
mime=UTF_STRING;else if(type=="image/png")
mime=PIXMAP;else
{console.log("not supported type: ",type);}
if(mime!==undefined)
{if(notify)
{this.sendSelNotify(mime);}
else
{const blob=await clipboardItem.getType(type);let buff=await blob.arrayBuffer();this.sendSelChunk(mime,true,true,buff);}}}}}catch(err)
{console.error(err.name,err.message);}}
else
{if(notify)
{console.log("browser doesn't support clipboard API, open clipboard widget");setTimeout(function(){app.__x2goclient.__domController.openClipElement();},100);}
else
{this.sendSelChunk(app.__x2goclient.__domController.__clipMime,true,true,app.__x2goclient.__domController.__clipBuffer);}}}
else
{console.log("server version is too old, disable copying clipboard");}}
sendSelNotify(mime)
{this.sendSelChunk(mime,true,true,0);if(mime==UTF_STRING)
{this.__x2goclient.selectionNotify("systemclipnotify","Text copied to Server");}
else
{this.__x2goclient.selectionNotify("systemclipnotify","Image copied to Server");}}
sendSelChunk(mime,first,last,data)
{let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,5);let v8=new Uint8Array(buffer);let length=0;if(data)
{length=data.byteLength;}
v32[0]=SELECTIONEVENT;v32[1]=length;v8[8]=CLIPBOARD;v8[9]=mime;v8[10]=first;v8[11]=last;v32[3]=0;v32[4]=length;let headerSize=20;let sentData=(length<EVENT_LENGTH-headerSize)?length:EVENT_LENGTH-headerSize;let dataset=new Uint8Array(data);v8.set(dataset.slice(0,sentData),headerSize);if(this.__websocket.readyState==WebSocket.OPEN)
{this.__websocket.send(buffer);while(sentData<length)
{let msg_length=(length-sentData<EVENT_LENGTH)?length-sentData:EVENT_LENGTH;v8.set(dataset.slice(sentData,sentData+msg_length),0);this.__websocket.send(buffer);sentData+=msg_length;}}}
requestServerSelection()
{let buffer=new ArrayBuffer(EVENT_LENGTH);let v32=new Uint32Array(buffer,0,1);let v16=new Uint16Array(buffer,0,3);v32[0]=DEMANDSELECTION;v16[2]=this.__selectionClipboard;if(this.__websocket.readyState==WebSocket.OPEN)
{this.__websocket.send(buffer);}}
pasteDataToClipboard()
{let nav=navigator;let app=this;if(this.__x2goclient.__domController.__sepWnd)
{nav=this.__x2goclient.__domController.__sepWnd.navigator;}
switch(this.__selectionFormat)
{case STRING:case UTF_STRING:if(typeof ClipboardItem!=="undefined")
{let blob=new Blob([new Uint8Array(this.__selData)],{type:'text/plain'});let data=[new ClipboardItem({"text/plain":blob})];nav.clipboard.write(data);this.__x2goclient.selectionNotify("serverclipnotify","Text copied to Clipboard");}
else
{console.log("The browser has no support for clipboardItem, open the Clipboard widget");let decoder=new TextDecoder();let str=decoder.decode(this.__selData);setTimeout(function(){app.__x2goclient.__domController.openClipElement(str);},100);}
break;case PIXMAP:{let blob=new Blob([new Uint8Array(this.__selData)],{type:'image/png'});if(typeof ClipboardItem!=="undefined")
{let data=[new ClipboardItem({"image/png":blob})];nav.clipboard.write(data);this.__x2goclient.selectionNotify("serverclipnotify","Image copied to Clipboard");}
else
{console.log("The browser has no support for clipboardItem, open the Clipboard widget");setTimeout(function(){app.__x2goclient.__domController.openClipElement(blob);},100);}
break;}}}
notifyUserSelection()
{if(this.__selectionFormat==PIXMAP)
this.__x2goclient.selectionNotify("serverclipnotify","New Image available");else
this.__x2goclient.selectionNotify("serverclipnotify","New Text available");}
setInputSelectionData(clipboard,format,firstChunk,lastChunk,compressed,size,data,notify)
{if(firstChunk)
{this.__selData=new Uint8Array();this.__selectionFormat=format;this.__totalCompressed=0;}
if(lastChunk&&notify)
{this.notifyUserSelection();return;}
if(!compressed)
{let narr=new Uint8Array(this.__selData.length+size);narr.set(this.__selData);narr.set(new Uint8Array(data),this.__selData.length);this.__selData=narr;}
else
{console.log("not supporting compressed texts");}
if(lastChunk)
{if(this.__serverVersion>=4)
{this.pasteDataToClipboard();}
else
{this.notifyUserSelection();}}}
getSelectionBuffer()
{this.setInputSelectionData(this.__selectionClipboard,this.__selectionFormat,this.__firstChunk,this.__lastChunk,this.__compressedSize,this.__selectionSize,this.__messageBuffer,false)
this.__bytesReady=0;this.__messageBuffer=0;}
getSelection()
{let msgArr=new Uint32Array(this.__messageBuffer,0,4);this.__selectionClipboard=CLIPBOARD;if(msgArr[1]!=CLIPBOARD)
{this.__selectionClipboard=PRIMARY;}
this.__selectionFormat=PIXMAP;if(msgArr[2]!=PIXMAP)
{this.__selectionFormat=UTF_STRING;}
this.__selectionSize=msgArr[3];if(this.__serverExtSelection)
{msgArr=new Uint32Array(this.__messageBuffer,0,8);this.__firstChunk=msgArr[4];this.__lastChunk=msgArr[5];this.__compressedSize=msgArr[6];this.__selectionTotalSize=msgArr[7];if(this.__firstChunk&&this.__lastChunk&&(this.__selectionSize==0)&&(this.__selectionTotalSize==0))
{this.setInputSelectionData(this.__selectionClipboard,this.__selectionFormat,this.__firstChunk,this.__lastChunk,this.__compressedSize,this.__selectionSize,this.__messageBuffer,true);}
else if(this.__lastChunk&&(this.__selectionSize==0))
{this.setInputSelectionData(this.__selectionClipboard,this.__selectionFormat,this.__firstChunk,this.__lastChunk,0,0,0,false);}}
else
{console.log("server not supports extended selection");this.__firstChunk=this.__lastChunk=true;this.__compressedSize=0;}
this.__currentDataType=SELECTIONBUFFER;if(this.__compressedSize)
{this.__bytesLeftToRead=this.__compressedSize;}
else
{this.__bytesLeftToRead=this.__selectionSize;}
this.__bytesReady=0;this.__messageBuffer=0;}
getCursor()
{let dimArr=new Uint16Array(this.__messageBuffer,10,4);this.__currentCursor={};this.__currentCursor["width"]=dimArr[0];this.__currentCursor["height"]=dimArr[1];this.__currentCursor["xhot"]=dimArr[2];this.__currentCursor["yhot"]=dimArr[3];let dataArr=new Uint32Array(this.__messageBuffer,20,2);this.__currentCursor["serial"]=dataArr[0];this.__currentCursor["size"]=dataArr[1];this.__bytesReady=0;this.__messageBuffer=0;if(this.__currentCursor["size"])
{this.__currentDataType=CURSORDATA;this.__bytesLeftToRead=this.__currentCursor["size"];}
else
{this.setCursor(this.__currentCursor["serial"]);}}
setCursor(serial)
{if(parseInt(this.__serverVersion)<3)
{return;}
this.__canvas.style.cursor="none";let cursor_img=this.__cursor;let cursor=this.__cursorCash.get(serial);if(!cursor)
{console.log("Error, Cursor not found in cash!!!!",serial);return;}
cursor_img.src=cursor["url"];cursor_img.style.width=cursor["width"];cursor_img.style.height=cursor["height"];cursor_img.dataset.hotX=cursor["xhot"];cursor_img.dataset.hotY=cursor["yhot"];}
getCursorImage()
{let blob=new Blob([this.__messageBuffer],{type:'image/png'});this.__currentCursor["url"]=window.URL.createObjectURL(blob);this.__cursorCash.set(this.__currentCursor["serial"],this.__currentCursor);this.setCursor(this.__currentCursor["serial"]);this.__bytesReady=0;this.__messageBuffer=0;}
getImageFrame()
{this.__currentFrame={};let msgArr=new Uint32Array(this.__messageBuffer,0,7);this.__currentFrame["width"]=msgArr[1];this.__currentFrame["height"]=msgArr[2];this.__currentFrame["x"]=msgArr[3];this.__currentFrame["y"]=msgArr[4];this.__currentFrame["numOfRegions"]=msgArr[5];this.__currentFrame["crc"]=msgArr[6];this.__currentFrame["regions"]=[];if(!this.__currentFrame["numOfRegions"])
{this.renderFrame();this.__bytesReady=0;}
else
{this.__bytesReady=0;this.__bytesLeftToRead=REGION_SIZE;this.__currentDataType=FRAMEREGION;}}
getFrameRegion()
{let region={};let msgArr=new Uint32Array(this.__messageBuffer,0,8);region["source_crc"]=msgArr[0];region["source_x"]=msgArr[1];region["source_y"]=msgArr[2];region["x"]=msgArr[3];region["y"]=msgArr[4];region["width"]=msgArr[5];region["height"]=msgArr[6];region["dataSize"]=msgArr[7];this.__currentFrame["regions"].push(region);if(!region["source_crc"])
{this.__bytesReady=0;this.__bytesLeftToRead=region["dataSize"];this.__currentDataType=REGIONDATA;this.__messageBuffer=0;}
else
{if(this.__currentFrame["numOfRegions"]==this.__currentFrame["regions"].length)
{this.__bytesReady=0;this.renderFrame()}
else
{this.__bytesReady=0;this.__bytesLeftToRead=REGION_SIZE;this.__currentDataType=FRAMEREGION;}}}
initSocket(sockPath,cookie)
{this.__cookie=cookie;console.log("Init socket on",sockPath);this.__websocket=new WebSocket(sockPath,['binary']);let app=this;this.__websocket.onopen=function(evt)
{app.onOpen(evt)};this.__websocket.onclose=function(evt)
{app.onClose(evt)};this.__websocket.onmessage=function(evt)
{app.onNalMessage(evt)};this.__websocket.onerror=function(evt)
{app.onError(evt)};this.__websocket.binaryType='arraybuffer';}}
var X2GOClientVersion="1.0";class
X2GoHTMLClient
{constructor()
{this.__sessionID="";console.log("X2Go HTML Client v. ",X2GOClientVersion);this.__domController=new X2GoDOMController();this.__kdriveClient=new X2GoKDriveHTMLClient(this.__domController.getCanvas(),this.__domController.getBackground(),this);this.__domController.setStartCallback(this,this.startX2GoConnection,this.suspendSession,this.terminateSession);}
startXHRRequest(app,request,callback)
{let controller=app.__domController;let xhr=new XMLHttpRequest();xhr.open("POST",RPC_path,true);xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");xhr.onreadystatechange=function()
{if(this.readyState===XMLHttpRequest.DONE&&this.status!=200)
{console.log("Error",this);alert("Error executing RPC, please contact your administrator for support");controller.reloadForm();}
if(this.readyState===XMLHttpRequest.DONE&&this.status===200)
{console.log(this);console.log(this.response);let jsonSep='__STARTJSON__{';let resp=JSON.parse(this.response.substr(this.response.indexOf(jsonSep)+jsonSep.length-1));console.log(resp);if(resp.status!=0)
{console.log("SSH exited with error:",resp.stderr);alert("Failed to connect to server, please check your login data\n"+"Error message: "+resp.err);controller.reloadForm();}
else
{callback(resp);}}}
xhr.send(request);}
wserr()
{let controller=this.__domController;alert("Error openning web socket, please try again");controller.reloadForm();}
wsopen()
{let controller=this.__domController;controller.updateStatus("<b>"+this.__sessionID+"</b>");controller.showSessionControls(true);}
wsclose()
{let controller=this.__domController;let app=this;controller.attachSession(controller);alert("Connection is closed");controller.reloadForm();}
startX2GoConnection(app)
{let d=app.__domController;let c=app.__kdriveClient;d.updateStatus("Connecting as <b>"+d.getUname()+"</b> to <b>"+d.getServer()+"</b>...");app.startXHRRequest(app,"action=start&user="+d.getUname()+"&pass="+d.getPass()+"&proxy="+d.getProxy()+
"&server="+d.getServer()+"&cmd="+
d.getCommand()+"&geometry="+c.getGeometry()+"&compression="+d.getCompression()+
"&proxyuser="+d.getProxyUser()+"&proxypass="+d.getProxyPass(),function(resp)
{if(resp.stdout.indexOf("X2GORUNCOMMAND ERR NOEXEC")!=-1)
{let cmd=resp.stdout;cmd=cmd.replace("X2GORUNCOMMAND ERR NOEXEC","");cmd=cmd.replace("\n","");cmd=cmd.replace(":","");console.log(resp.stdout);console.log("Err not found:",cmd);alert("It looks like "+d.getCommand()+"("+cmd+") is not installed on the "+d.getServer()+
"\nplease install it or try different kind of session");}
app.__sessionID=resp.session.id;if(!app.__sessionID)
{alert("It looks like X2Go Server is not installed or broken on the "+d.getServer()+
"\nplease install it if you want to open X2Go connection");}
d.updateStatus("resuming X2Go session with ID <b>"+resp.session.id+"</b>");c.initSocket("wss://"+window.location.hostname+"/x2gows/"+resp.session.wsport,resp.session.cookie);});c.renderBackground();}
suspendSession(app)
{let d=app.__domController;d.attachSession(d);console.log("Suspending session ",app.__sessionID," on ",d.getServer());d.updateStatus("suspending X2Go session with ID <b>"+app.__sessionID+"</b>");app.startXHRRequest(app,"action=suspend&sid="+app.__sessionID+"&user="+d.getUname()+"&pass="+d.getPass()+
"&proxy="+d.getProxy()+"&server="+d.getServer()+"&proxyuser="+d.getProxyUser()+
"&proxypass="+d.getProxyPass(),function()
{});}
selectionNotify(id,text)
{this.__domController.serverClipNotify(id,text);}
terminateSession(app)
{let d=app.__domController;d.attachSession(d);console.log("Terminating session ",app.__sessionID," on ",d.getServer());d.updateStatus("terminating X2Go session with ID <b>"+app.__sessionID+"</b>");app.startXHRRequest(app,"action=terminate&sid="+app.__sessionID+"&user="+d.getUname()+"&pass="+d.getPass()+
"&proxy="+d.getProxy()+"&server="+d.getServer()+"&proxyuser="+d.getProxyUser()+
"&proxypass="+d.getProxyPass(),function()
{});}
resizeExtCanvas(c,cv,wnd)
{let width=wnd.document.body.clientWidth-20;let height=wnd.document.body.clientHeight-cv.offsetTop-20;cv.width=width;cv.style.width=width+"px";cv.style.height=height+"px";cv.height=height;c.sendGeometryEvent();}
updateDOMFPS(count){this.__domController.updateFPS(count);}}
function main()
{let client=new X2GoHTMLClient();}
main();